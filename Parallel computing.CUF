
!*********************************************************************************
!=================================================================================
!    以下部分为模块定义
!=================================================================================
!*********************************************************************************
!=================================================================================
MODULE CONSTANTST
   REAL(8),PARAMETER :: PI=3.141592653589793E+00
   REAL(8),PARAMETER :: MIU0=4.D-7*PI
   REAL(8),PARAMETER :: EPSL0=1.0D-9/PI/36.0D0
   REAL(8),PARAMETER :: AIR_S0=1.0E-12 !空气层的电导率
   REAL(8),PARAMETER :: JA1=-3.453877639491068526E+01
   REAL(8),PARAMETER :: JS1= 2.302585092994045684E-01
   REAL(8),PARAMETER :: JA5=-1.842068074395236547E+01
   REAL(8),PARAMETER :: JS5= 2.302585092994045684E-01
   INTEGER,PARAMETER :: NH0=301       !0阶汉克尔系数个数
   INTEGER,PARAMETER :: NH1=301       !1阶汉克尔系数个数
   INTEGER,PARAMETER :: NH05=160      !0.5阶汉克尔系数个数
   INTEGER :: NG     !高斯积分点数
   !============================================================
   REAL(8) :: JH0(NH0),JH1(NH1),JH05(NH05) !汉克尔变换系数
   REAL(8),Allocatable :: XGS(:),WGS(:)    !高斯积分点和高斯积分系数
   !============================================================
   DATA JH0(1:NH0)/ &
       0.230258509299403E-15, 0.289878288638864E-15, 0.364935143894870E-15, 0.459426126306012E-15,  &
       0.578383225248795E-15, 0.728141340021177E-15, 0.916675636330517E-15, 0.115402625294907E-14,  &
       0.145283297571520E-14, 0.182900835222041E-14, 0.230258509299404E-14, 0.289878288638863E-14,  &
       0.364935143894869E-14, 0.459426126306013E-14, 0.578383225248796E-14, 0.728141340021178E-14,  &
       0.916675636330518E-14, 0.115402625294908E-13, 0.145283297571520E-13, 0.182900835222040E-13,  &
       0.230258509299404E-13, 0.289878288638864E-13, 0.364935143894870E-13, 0.459426126306012E-13,  &
       0.578383225248797E-13, 0.728141340021179E-13, 0.916675636330519E-13, 0.115402625294908E-12,  &
       0.145283297571520E-12, 0.182900835222040E-12, 0.230258509299404E-12, 0.289878288638863E-12,  &
       0.364935143894870E-12, 0.459426126306012E-12, 0.578383225248796E-12, 0.728141340021178E-12,  &
       0.916675636330523E-12, 0.115402625294907E-11, 0.145283297571520E-11, 0.182900835222039E-11,  &
       0.230258509299406E-11, 0.289878288638860E-11, 0.364935143894873E-11, 0.459426126306006E-11,  &
       0.578383225248807E-11, 0.728141340021160E-11, 0.916675636330549E-11, 0.115402625294904E-10,  &
       0.145283297571527E-10, 0.182900835222029E-10, 0.230258509299422E-10, 0.289878288638835E-10,  &
       0.364935143894914E-10, 0.459426126305941E-10, 0.578383225248909E-10, 0.728141340021001E-10,  &
       0.916675636330801E-10, 0.115402625294863E-09, 0.145283297571591E-09, 0.182900835221928E-09,  &
       0.230258509299582E-09, 0.289878288638581E-09, 0.364935143895317E-09, 0.459426126305303E-09,  &
       0.578383225249919E-09, 0.728141340019398E-09, 0.916675636333344E-09, 0.115402625294460E-08,  &
       0.145283297572230E-08, 0.182900835220916E-08, 0.230258509301186E-08, 0.289878288636039E-08,  &
       0.364935143899346E-08, 0.459426126298919E-08, 0.578383225260039E-08, 0.728141340003359E-08,  &
       0.916675636358762E-08, 0.115402625290432E-07, 0.145283297578614E-07, 0.182900835210798E-07,  &
       0.230258509317224E-07, 0.289878288610622E-07, 0.364935143939630E-07, 0.459426126235073E-07,  &
       0.578383225361227E-07, 0.728141339842988E-07, 0.916675636612933E-07, 0.115402625250149E-06,  &
       0.145283297642459E-06, 0.182900835109610E-06, 0.230258509477595E-06, 0.289878288356450E-06,  &
       0.364935144342465E-06, 0.459426125596622E-06, 0.578383226373104E-06, 0.728141338239271E-06,  &
       0.916675639154654E-06, 0.115402624847313E-05, 0.145283298280911E-05, 0.182900834097732E-05,  &
       0.230258511081313E-05, 0.289878285814729E-05, 0.364935148370823E-05, 0.459426119212106E-05,  &
       0.578383236491881E-05, 0.728141322202092E-05, 0.916675664571870E-05, 0.115692568635141E-04,  &
       0.145087827351971E-04, 0.182530641973561E-04, 0.230329093159017E-04, 0.290287571882358E-04,  &
       0.365008256307404E-04, 0.459026901030200E-04, 0.578164379419823E-04, 0.728478000065234E-04,  &
       0.917024805846445E-04, 0.115380000226873E-03, 0.145238834894431E-03, 0.182908228502699E-03,  &
       0.230307873270612E-03, 0.289887792454861E-03, 0.364887377803399E-03, 0.459397200620795E-03,  &
       0.578423721936644E-03, 0.728181542633835E-03, 0.916648402487170E-03, 0.115395875282585E-02,  &
       0.145283308780011E-02, 0.182902990494560E-02, 0.230256008248954E-02, 0.289857991498878E-02,  &
       0.364912928720313E-02, 0.459378273753700E-02, 0.578309102578837E-02, 0.727938387170171E-02,  &
       0.916333272186852E-02, 0.115325744795914E-01, 0.145146650014459E-01, 0.182601452272593E-01,  &
       0.229700255283581E-01, 0.288702043418760E-01, 0.362692440469273E-01, 0.454794903475425E-01,  &
       0.569407846225404E-01, 0.709871978329290E-01, 0.880995368691852E-01, 0.108224007793146E+00,  &
       0.131250538187391E+00, 0.155055605753986E+00, 0.176371397854097E+00, 0.185627814446814E+00,  &
       0.169778199522253E+00, 0.103405228464647E+00,-0.302585080852413E-01,-0.227574462293652E+00,  &
      -0.362173038933215E+00,-0.205500274117075E+00, 0.337394760195314E+00, 0.317689637576683E+00,  &
      -0.513762181990569E+00, 0.309130540155790E+00,-0.126757397548834E+00, 0.461966182048520E-01,  &
      -0.180971728957747E-01, 0.835424027057190E-02,-0.447340689899017E-02, 0.261992284481349E-02,  &
      -0.160186527593784E-02, 0.997487568736810E-03,-0.626255324679473E-03, 0.394547305739130E-03,  &
      -0.248532137821463E-03, 0.156659377774707E-03,-0.990528420086167E-04, 0.624951030522875E-04,  &
      -0.392380367944152E-04, 0.248316425706516E-04,-0.158101814991317E-04, 0.985592094149573E-05,  &
      -0.613544872004916E-05, 0.400934598819861E-05,-0.255461486714110E-05, 0.147749188535257E-05,  &
      -0.957845189423385E-06, 0.718083810567243E-06,-0.389102220100711E-06, 0.163476698770087E-06,  &
      -0.191211696957178E-06, 0.165602216023964E-06,-0.691689649529385E-08,-0.329252673136464E-08,  &
      -0.916461597786438E-07, 0.322668612246087E-07,-0.989180887451364E-08, 0.624130945956812E-08,  &
      -0.393800004268785E-08, 0.248471004949759E-08,-0.156774605463391E-08, 0.989180887451260E-09,  &
      -0.624130945956750E-09, 0.393800004268844E-09,-0.248471004949674E-09, 0.156774605463395E-09,  &
      -0.989180887451288E-10, 0.624130945956768E-10,-0.393800004268852E-10, 0.248471004949741E-10,  &
      -0.156774605463399E-10, 0.989180887451071E-11,-0.624130945956782E-11, 0.393800004268766E-11,  &
      -0.248471004949748E-11, 0.156774605463403E-11,-0.989180887451090E-12, 0.624130945956798E-12,  &
      -0.393800004268776E-12, 0.248471004949753E-12,-0.156774605463407E-12, 0.989180887451366E-13,  &
      -0.624130945956817E-13, 0.393800004268788E-13,-0.248471004949760E-13, 0.156774605463449E-13,  &
      -0.989180887451387E-14, 0.624130945956979E-14,-0.393800004268890E-14, 0.248471004949765E-14,  &
      -0.156774605463414E-14, 0.989180887451653E-15,-0.624130945956999E-15, 0.393800004268903E-15,  &
      -0.248471004949773E-15, 0.156774605463456E-15,-0.989180887451434E-16, 0.624130945956860E-16,  &
      -0.393800004269009E-16, 0.248471004949901E-16,-0.156774605463499E-16, 0.989180887451950E-17,  &
      -0.624130945957493E-17, 0.393800004269214E-17,-0.248471004949846E-17, 0.156774605463465E-17,  &
      -0.989180887451971E-18, 0.624130945957199E-18,-0.393800004269029E-18, 0.248471004949975E-18,  &
      -0.156774605463547E-18, 0.989180887452002E-19,-0.624130945957219E-19, 0.393800004269233E-19,  &
      -0.248471004949981E-19, 0.156774605463551E-19,-0.989180887452028E-20, 0.624130945957232E-20,  &
      -0.393800004269050E-20, 0.248471004949866E-20,-0.156774605463555E-20, 0.989180887452049E-21,  &
      -0.624130945957251E-21, 0.393800004269060E-21,-0.248471004949994E-21, 0.156774605463558E-21,  &
      -0.989180887452080E-22, 0.624130945957264E-22,-0.393800004269264E-22, 0.248471004949879E-22,  &
      -0.156774605463485E-22, 0.989180887452101E-23,-0.624130945957278E-23, 0.393800004269081E-23,  &
      -0.248471004949884E-23, 0.156774605463566E-23,-0.989180887452122E-24, 0.624130945957303E-24,  &
      -0.393800004269093E-24, 0.248471004950012E-24,-0.156774605463571E-24, 0.989180887452152E-25,  &
      -0.624130945957316E-25, 0.393800004269101E-25,-0.248471004949899E-25, 0.156774605463498E-25,  &
      -0.989180887452173E-26, 0.624130945957330E-26,-0.393800004269110E-26, 0.248471004949904E-26,  &
      -0.156774605463579E-26, 0.989180887452214E-27,-0.624130945957349E-27, 0.393800004269126E-27,  &
      -0.248471004949789E-27, 0.156774605463505E-27,-0.989180887451743E-28, 0.624130945957052E-28,  &
      -0.393800004268938E-28, 0.248471004949794E-28,-0.156774605463433E-28, 0.989180887451283E-29,  &
      -0.624130945957375E-29/
 
    DATA JH1(1:NH1)/ &
       0.113588466232775E-30, 0.184909557020443E-30, 0.285321327106096E-30, 0.464471807336095E-30,  &
       0.716694770178106E-30, 0.116670043066626E-29, 0.180025586874425E-29, 0.293061898142696E-29,  &
       0.452203828994423E-29, 0.736138205537089E-29, 0.113588466232777E-28, 0.184909557020442E-28,  &
       0.285321327106095E-28, 0.464471807336096E-28, 0.716694770178108E-28, 0.116670043066627E-27,  &
       0.180025586874426E-27, 0.293061898142699E-27, 0.452203828994421E-27, 0.736138205537085E-27,  &
       0.113588466232776E-26, 0.184909557020442E-26, 0.285321327106095E-26, 0.464471807336094E-26,  &
       0.716694770178109E-26, 0.116670043066627E-25, 0.180025586874426E-25, 0.293061898142697E-25,  &
       0.452203828994422E-25, 0.736138205537087E-25, 0.113588466232776E-24, 0.184909557020441E-24,  &
       0.285321327106096E-24, 0.464471807336095E-24, 0.716694770178106E-24, 0.116670043066627E-23,  &
       0.180025586874427E-23, 0.293061898142698E-23, 0.452203828994420E-23, 0.736138205537088E-23,  &
       0.113588466232777E-22, 0.184909557020442E-22, 0.285321327106094E-22, 0.464471807336096E-22,  &
       0.716694770178107E-22, 0.116670043066627E-21, 0.180025586874427E-21, 0.293061898142699E-21,  &
       0.452203828994421E-21, 0.736138205537085E-21, 0.113588466232777E-20, 0.184909557020442E-20,  &
       0.285321327106095E-20, 0.464471807336094E-20, 0.716694770178109E-20, 0.116670043066627E-19,  &
       0.180025586874426E-19, 0.293061898142699E-19, 0.452203828994422E-19, 0.736138205537086E-19,  &
       0.113588466232776E-18, 0.184909557020442E-18, 0.285321327106096E-18, 0.464471807336094E-18,  &
       0.716694770178106E-18, 0.116670043066627E-17, 0.180025586874427E-17, 0.293061898142698E-17,  &
       0.452203828994423E-17, 0.736138205537088E-17, 0.113588466232776E-16, 0.184909557020441E-16,  &
       0.285321327106096E-16, 0.464471807336096E-16, 0.716694770178107E-16, 0.116670043066627E-15,  &
       0.180025586874427E-15, 0.293061898142699E-15, 0.452203828994421E-15, 0.736138205537090E-15,  &
       0.113588466232777E-14, 0.184909557020442E-14, 0.285321327106097E-14, 0.464471807336097E-14,  &
       0.716694770178111E-14, 0.116670043066627E-13, 0.180025586874427E-13, 0.293061898142700E-13,  &
       0.452203828994423E-13, 0.736138205537091E-13, 0.113588466232777E-12, 0.184909557020443E-12,  &
       0.285321327106097E-12, 0.464471807336098E-12, 0.716694770178110E-12, 0.116670043066628E-11,  &
       0.180025586874427E-11, 0.293061898142700E-11, 0.452203828994424E-11, 0.736138205537090E-11,  &
       0.113588466232777E-10, 0.184909557020443E-10, 0.285321327106097E-10, 0.464471807336097E-10,  &
       0.716694770178112E-10, 0.116670043066627E-09, 0.180025586874428E-09,-0.236788869548338E-07,  &
      -0.334475141166181E-07, 0.134870873828571E-07, 0.408385473343560E-07, 0.280121976514437E-08,  &
      -0.380302709879098E-07,-0.109746179621941E-07, 0.440835037014508E-07, 0.411565840080884E-07,  &
      -0.985920070296272E-08,-0.114412869949359E-07, 0.596273408981848E-07, 0.121347401070404E-06,  &
       0.115746143593174E-06, 0.135755137670835E-06, 0.265285400213762E-06, 0.508740713912392E-06,  &
       0.753780468129344E-06, 0.113366704055012E-05, 0.174921480162424E-05, 0.294678050152096E-05,  &
       0.458175245070243E-05, 0.736613577570292E-05, 0.112972894502548E-04, 0.184628814870215E-04,  &
       0.285861497878519E-04, 0.464946994202422E-04, 0.716237744109514E-04, 0.116587618266200E-03,  &
       0.180006697243418E-03, 0.293050475810005E-03, 0.451987234629232E-03, 0.735484357606847E-03,  &
       0.113440284010395E-02, 0.184555415559067E-02, 0.284421704926730E-02, 0.462189906476383E-02,  &
       0.710970555942942E-02, 0.115237043776898E-01, 0.176435641387987E-01, 0.284076556045201E-01,  &
       0.429769445157177E-01, 0.680331730038758E-01, 0.997846861084994E-01, 0.151070679020061E+00,  &
       0.203540534518256E+00, 0.271235203507808E+00, 0.276073843274538E+00, 0.216692162759385E+00,  &
      -0.783722496525276E-01,-0.340675776800532E+00,-0.360693896284711E+00, 0.513024574160905E+00,  &
      -0.594721924294170E-01,-0.195117008425594E+00, 0.199235364397954E+00,-0.138521821446553E+00,  &
       0.879321576119434E-01,-0.550694068838152E-01, 0.345638999530987E-01,-0.217529336450324E-01,  &
       0.137098107412830E-01,-0.864648647769419E-02, 0.545485444156662E-02,-0.344135145524447E-02,  &
       0.217112709073384E-02,-0.137009501223577E-02, 0.864510640210768E-03,-0.545257776035130E-03,  &
       0.344079400552110E-03,-0.217267214354118E-03, 0.136982454493871E-03,-0.863196031805410E-04,  &
       0.545979140323202E-04,-0.344991451557358E-04, 0.216281976334282E-04,-0.136512898199950E-04,  &
       0.873856143359011E-05,-0.546449722783360E-05, 0.335048002563884E-05,-0.219379741348718E-05,  &
       0.144594211470428E-05,-0.816683898775421E-06, 0.491549174330555E-06,-0.407505580172176E-06,  &
       0.245223932571511E-06,-0.678310841537617E-07, 0.864396337400058E-07,-0.545397217624348E-07,  &
       0.344122380119146E-07,-0.217126543136179E-07, 0.136997587073368E-07,-0.864396337400062E-08,  &
       0.545397217624350E-08,-0.344122380119143E-08, 0.217126543136180E-08,-0.136997587073368E-08,  &
       0.864396337400058E-09,-0.545397217624348E-09, 0.344122380119144E-09,-0.217126543136180E-09,  &
       0.136997587073368E-09,-0.864396337400064E-10, 0.545397217624350E-10,-0.344122380119146E-10,  &
       0.217126543136179E-10,-0.136997587073368E-10, 0.864396337400066E-11,-0.545397217624345E-11,  &
       0.344122380119144E-11,-0.217126543136179E-11, 0.136997587073368E-11,-0.864396337400058E-12,  &
       0.545397217624348E-12,-0.344122380119146E-12, 0.217126543136178E-12,-0.136997587073367E-12,  &
       0.864396337400058E-13,-0.545397217624343E-13, 0.344122380119143E-13,-0.217126543136179E-13,  &
       0.136997587073368E-13,-0.864396337400050E-14, 0.545397217624343E-14,-0.344122380119144E-14,  &
       0.217126543136180E-14,-0.136997587073366E-14, 0.864396337400054E-15,-0.545397217624345E-15,  &
       0.344122380119141E-15,-0.217126543136178E-15, 0.136997587073367E-15,-0.864396337400058E-16,  &
       0.545397217624335E-16,-0.344122380119138E-16, 0.217126543136178E-16,-0.136997587073367E-16,  &
       0.864396337400054E-17,-0.545397217624345E-17, 0.344122380119144E-17,-0.217126543136175E-17,  &
       0.136997587073365E-17,-0.864396337400050E-18, 0.545397217624343E-18,-0.344122380119140E-18,  &
       0.217126543136177E-18,-0.136997587073367E-18, 0.864396337400058E-19,-0.545397217624340E-19,  &
       0.344122380119141E-19,-0.217126543136178E-19, 0.136997587073365E-19,-0.864396337400054E-20,  &
       0.545397217624343E-20,-0.344122380119144E-20, 0.217126543136175E-20,-0.136997587073365E-20,  &
       0.864396337400050E-21,-0.545397217624340E-21, 0.344122380119140E-21,-0.217126543136178E-21,  &
       0.136997587073368E-21,-0.864396337400046E-22, 0.545397217624337E-22,-0.344122380119141E-22,  &
       0.217126543136176E-22,-0.136997587073366E-22, 0.864396337400050E-23,-0.545397217624345E-23,  &
       0.344122380119143E-23,-0.217126543136174E-23, 0.136997587073365E-23,-0.864396337400046E-24,  &
       0.545397217624332E-24,-0.344122380119137E-24, 0.217126543136174E-24,-0.136997587073366E-24,  &
       0.864396337400041E-25,-0.545397217624340E-25, 0.344122380119139E-25,-0.217126543136178E-25,  &
       0.136997587073364E-25,-0.864396337400037E-26, 0.545397217624337E-26,-0.344122380119137E-26,  &
       0.217126543136180E-26,-0.136997587073366E-26, 0.864396337400057E-27,-0.545397217624345E-27,  &
       0.344122380119145E-27,-0.217126543136179E-27, 0.136997587073369E-27,-0.864396337400069E-28,  &
       0.545397217624337E-28/

    DATA JH05(1:NH05)/ &
       0.259511139938829E-12, 0.366568771323555E-12, 0.517792876616242E-12, 0.731400730405791E-12,  &
       0.103313281156235E-11, 0.145933600088387E-11, 0.206137146234699E-11, 0.291175733962418E-11,  &
       0.411297804457870E-11, 0.580971771117984E-11, 0.820647323099742E-11, 0.115919058389365E-10,  &
       0.163740746547780E-10, 0.231288803930431E-10, 0.326705938902288E-10, 0.461481520721098E-10,  &
       0.651864545047052E-10, 0.920775899532545E-10, 0.130064200980219E-09, 0.183718747396255E-09,  &
       0.259512512377884E-09, 0.366566596154242E-09, 0.517796324027279E-09, 0.731395266627501E-09,  &
       0.103314147106736E-08, 0.145932227649333E-08, 0.206139321404013E-08, 0.291172286551380E-08,  &
       0.411303268236158E-08, 0.580963111612975E-08, 0.820661047490285E-08, 0.115916883220051E-07,  &
       0.163744193958818E-07, 0.231283340152144E-07, 0.326714598407299E-07, 0.461467796330556E-07,  &
       0.684744728867720E-07, 0.546574677490374E-07, 0.113319898777493E-06, 0.216529974157527E-06,  &
       0.288629942214140E-06, 0.342872728051125E-06, 0.479119488706262E-06, 0.742089418889752E-06,  &
       0.107736520535271E-05, 0.146383231306575E-05, 0.201727682134668E-05, 0.289058197617431E-05,  &
       0.415237808867022E-05, 0.584448989361742E-05, 0.818029430348419E-05, 0.115420854481494E-04,  &
       0.163897017145322E-04, 0.231769096113890E-04, 0.326872676331330E-04, 0.460786866701851E-04,  &
       0.651827321351636E-04, 0.920862589540037E-04, 0.130169142615951E-03, 0.183587481111627E-03,  &
       0.259595544393723E-03, 0.366324383719323E-03, 0.518210697462501E-03, 0.730729969562531E-03,  &
       0.103385239132389E-02, 0.145738764044730E-02, 0.206298256402732E-02, 0.290606401578959E-02,  &
       0.411467957883740E-02, 0.579034253321120E-02, 0.820005721235220E-02, 0.115193892333104E-01,  &
       0.163039398900789E-01, 0.228256810984487E-01, 0.322248555163692E-01, 0.447865101670011E-01,  &
       0.627330674874545E-01, 0.857058672847471E-01, 0.117418179407605E+00, 0.153632645832305E+00,  &
       0.197718111895102E+00, 0.228849924263247E+00, 0.240310905012422E+00, 0.165409071929404E+00,  &
       0.284709685167114E-02,-0.288015846269687E+00,-0.369097391853225E+00,-0.250109865922601E-01,  &
       0.571811109500426E+00,-0.392261390212769E+00, 0.763282774297327E-01, 0.516233692927851E-01,  &
      -0.648015160576432E-01, 0.489045522502552E-01,-0.326934307794750E-01, 0.210542570949745E-01,  &
      -0.133862848934736E-01, 0.847098801479259E-02,-0.535134515919751E-02, 0.337814023806349E-02,  &
      -0.213157364002470E-02, 0.134506352474558E-02,-0.848929743771803E-03, 0.535521822356713E-03,  &
      -0.337744799986382E-03, 0.213268792633204E-03,-0.134629969723156E-03, 0.847737416679279E-04,  &
      -0.534940635827096E-04, 0.339044416298191E-04,-0.213315638358794E-04, 0.133440911625019E-04,  &
      -0.851629073825634E-05, 0.544362672273211E-05,-0.332112278417896E-05, 0.207147190852386E-05,  &
      -0.142009412555511E-05, 0.878247754998004E-06,-0.455662890473703E-06, 0.338598103040009E-06,  &
      -0.287407830772251E-06, 0.107866150545699E-06,-0.247240241853581E-07, 0.535535110396030E-07,  &
      -0.337899811131378E-07, 0.213200367531820E-07,-0.134520337740075E-07, 0.848765950790546E-08,  &
      -0.535535110396018E-08, 0.337899811131383E-08,-0.213200367531819E-08, 0.134520337740075E-08,  &
      -0.848765950790576E-09, 0.535535110396015E-09,-0.337899811131382E-09, 0.213200367531811E-09,  &
      -0.134520337740079E-09, 0.848765950790572E-10,-0.535535110396034E-10, 0.337899811131381E-10,  &
      -0.213200367531818E-10, 0.134520337740074E-10,-0.848765950790571E-11, 0.535535110396031E-11,  &
      -0.337899811131379E-11, 0.213200367531817E-11,-0.134520337740073E-11, 0.848765950790567E-12,  &
      -0.535535110396029E-12, 0.337899811131377E-12,-0.213200367531816E-12, 0.134520337740078E-12,  &
      -0.848765950790596E-13, 0.535535110396007E-13,-0.337899811131377E-13, 0.213200367531816E-13,  &
      -0.134520337740083E-13, 0.848765950790558E-14,-0.535535110396025E-14, 0.337899811131389E-14/
!========================================================================================================
END MODULE CONSTANTST
!========================================================================================================

MODULE FREQUENCY_FORWARD
    USE CUDAFOR
    USE CONSTANTST
	USE LDCSEM_DATA
    IMPLICIT NONE
!----------------------------------------------------------------------
    REAL(8),DEVICE :: GPI=PI
    REAL(8),DEVICE :: GMIU0=MIU0
    REAL(8),DEVICE :: GEPSL0=EPSL0
    REAL(8),DEVICE :: GAIR_S0=AIR_S0  !空气层的电导率
    REAL(8),DEVICE :: GJA1=JA1
    REAL(8),DEVICE :: GJS1=JS1
    REAL(8),DEVICE :: GJA5=JA5
    REAL(8),DEVICE :: GJS5=JS5
    INTEGER,DEVICE :: GNH0=NH0       !0阶汉克尔系数个数
    INTEGER,DEVICE :: GNH1=NH1       !1阶汉克尔系数个数
    INTEGER,DEVICE :: GNH05=NH05     !0.5阶汉克尔系数个数
    INTEGER,DEVICE :: NFFE,GNLP,SNG  !计算频率数、模型层数、高斯积分点数
    REAL(8),DEVICE :: GYXS,GYYS,GYZS,GLENAB,GYI0,GX1,GY1,GZ1
    REAL(8),DEVICE,ALLOCATABLE :: GJH0(:),GJH1(:),GJH05(:),GF(:),GXGS(:),GWGS(:)
    REAL(8),DEVICE,ALLOCATABLE :: GRTH(:),GHDS(:),GHDSZ(:)
!----------------------------------------------------------------------
CONTAINS
!*******************************************************************************
!   上下行波比值函数传递法 计算顶层的系数
!   大地有 GNLP 层，求解时加上空气层，故有GNLP+1层
!*******************************************************************************
	ATTRIBUTES(DEVICE) SUBROUTINE MCS_RR( XCH,GM,GYHS,RRH,RRV,MCSXS )
	IMPLICIT NONE
    INTEGER,VALUE :: XCH
	INTEGER,DEVICE :: I,J,K
	REAL(8),DEVICE :: GM,MM,GYHS,YCS0
	COMPLEX*16,DEVICE :: RHFM,RHFZ,RVFM,RVFZ
	COMPLEX*16,DEVICE :: RHFS,RHFT,RVFS,RVFT
	COMPLEX*16,DEVICE :: CDS0,CDS1,RRH(0:200),RRV(0:200),MCSXS(1:4,0:200)
	COMPLEX*16,DEVICE :: IOMGA,SLPX,SLPZ
	COMPLEX*16,DEVICE :: KNF0,SNK0,KNF1,SNK1,KF
!-----------------------------------------------------------
	MM=GM*GM
	IOMGA=DCMPLX(0.0D0,1.0D0)*2.0D0*GPI*GF(XCH)
	KF=IOMGA*GMIU0
	!---不考虑位移电流----空气层电导率为 AIR_S0
!===========================================================
!   计算传递函数
	RRH(0:200)=DCMPLX(0.0D0,0.0D0)
	RRV(0:200)=DCMPLX(0.0D0,0.0D0)
    MCSXS(1:4,0:200)=DCMPLX(0.0D0,0.0D0)
!-----------------------------------------------------------
    DO I=GNLP-1,0,-1
	IF (I==0) THEN
	KNF0=KF*DCMPLX(GAIR_S0,IOMGA*GEPSL0)
	SNK0=CDSQRT(MM - KNF0)
	ELSE
	KNF0=KF*DCMPLX(1.0D0/GRTH(I),IOMGA*GEPSL0)
	SNK0=CDSQRT(MM - KNF0)
	END IF
	KNF1=KF*DCMPLX(1.0D0/GRTH(I+1),IOMGA*GEPSL0)
	SNK1=CDSQRT(MM - KNF1)

	IF (I==0) THEN
	CDS0=1.0D0
	CDS1=CDEXP( -SNK1*GHDS(I+1) )
	ELSEIF (I==GNLP-1) THEN
	CDS0=CDEXP( -SNK0*GHDS(I) )
	CDS1=0.0D0
	ELSE
	CDS0=CDEXP( -SNK0*GHDS(I) )
	CDS1=CDEXP( -SNK1*GHDS(I+1) )
	END IF

	RHFT=SNK0 - SNK1
	RHFS=SNK0 + SNK1
	RVFT=KNF1*SNK0 - KNF0*SNK1
	RVFS=KNF1*SNK0 + KNF0*SNK1
	RHFT=RHFT/RHFS
	RVFT=RVFT/RVFS

    RHFZ=RRH(I+1)*CDS1 + RHFT
    RHFM=1.0D0 + RHFT*RRH(I+1)*CDS1
    RVFZ=RRV(I+1)*CDS1 + RVFT
    RVFM=1.0D0 + RVFT*RRV(I+1)*CDS1

	RRH(I)=CDS0*RHFZ/RHFM
	RRV(I)=CDS0*RVFZ/RVFM
	END DO   !由底层往源层计算
!-----------------------------------------------------------
	KNF0=KF*DCMPLX(GAIR_S0,IOMGA*GEPSL0)
	SNK0=CDSQRT(MM - KNF0)
    CDS0=CDEXP(-SNK0*DABS(GHDSZ(1)-GYHS))  !计算顶层系数
	SLPZ= 0.5D0*CDS0/SNK0
	SLPX=-0.5D0*CDS0/MM              !水平(XY)偶极子 的垂直矢量位需要乘一个系数
    MCSXS(1,0)=SLPZ*RRH(0)           !x & y dipole----a1
    MCSXS(2,0)=DCMPLX(0.0D0,0.0D0)   !x & y dipole----b1
    MCSXS(3,0)=SLPX*RRV(0)           !x & y dipole----f1
    MCSXS(4,0)=DCMPLX(0.0D0,0.0D0)   !x & y dipole----g1
!--------------------------------------------
	SLPZ= 0.5D0*CDS0/SNK0
	SLPX=-0.5D0*CDS0/MM         !水平(XY)偶极子 的垂直矢量位需要乘一个系数
	CDS0=DCMPLX(0.0D0,0.0D0)
	DO I=1,GNLP-1               !由上往下逐渐计算各层系数
    KNF1=KF*DCMPLX(1.0D0/GRTH(I),IOMGA*GEPSL0)
	SNK1=CDSQRT(MM - KNF1)
	RHFT=1.0D0+SNK0/SNK1
	RHFS=1.0D0-SNK0/SNK1
    MCSXS(2,I)= 0.5D0*( RHFS*MCSXS(1,I-1) + RHFT*CDS0*MCSXS(2,I-1) + RHFT*SLPZ )
    MCSXS(1,I)=MCSXS(2,I)*RRH(I)
	RHFT=1.0D0+(SNK0*KNF1)/(SNK1*KNF0)
	RHFS=1.0D0-(SNK0*KNF1)/(SNK1*KNF0)
    MCSXS(4,I)= 0.5D0*( RHFS*MCSXS(3,I-1) + RHFT*CDS0*MCSXS(4,I-1) + RHFT*SLPX )
    MCSXS(3,I)=MCSXS(4,I)*RRV(I)
    KNF0=KNF1
	SNK0=SNK1
	CDS0=CDEXP(-SNK1*GHDS(I) )
	SLPX= DCMPLX(0.0D0,0.0D0)
	SLPZ= DCMPLX(0.0D0,0.0D0)
	END DO
!--------------------------------------------
    KNF1=KF*DCMPLX(1.0D0/GRTH(GNLP),IOMGA*GEPSL0)  !求取底层系数
	SNK1=CDSQRT(MM - KNF1)
	RHFT=1.0D0+SNK0/SNK1
	RHFS=1.0D0-SNK0/SNK1
    MCSXS(1,GNLP)=DCMPLX(0.0D0,0.0D0)
    MCSXS(2,GNLP)= 0.5D0*( RHFS*MCSXS(1,GNLP-1) + RHFT*CDS0*MCSXS(2,GNLP-1) + RHFT*SLPZ )
	RHFT=1.0D0+(SNK0*KNF1)/(SNK1*KNF0)
	RHFS=1.0D0-(SNK0*KNF1)/(SNK1*KNF0)
    MCSXS(3,GNLP)=DCMPLX(0.0D0,0.0D0)
    MCSXS(4,GNLP)= 0.5D0*( RHFS*MCSXS(3,GNLP-1) + RHFT*CDS0*MCSXS(4,GNLP-1) + RHFT*SLPX )
!-----------------------------------------------------------
	RETURN
	END SUBROUTINE
!*********************************************************************************

!---------------------------------------------------------------------------------
!   计算单点（空气层任意位置）、多频、多波数---水平长导线源响应模拟计算
!   JSCH=0 表示计算层在空气层，为i时表时间计算层在第i层
!---------------------------------------------------------------------------------
	ATTRIBUTES(GLOBAL) SUBROUTINE EAIR_HEDX( JSCF,FEEX,FEEY,FEEZ,FHHX,FHHY,FHHZ )
!-------------------------------------------------
	IMPLICIT NONE
!-------------------------------------------------
    INTEGER,VALUE :: XCH
	INTEGER,DEVICE :: I,J,K,JSCF,JSCH
	REAL(8),DEVICE :: LS,RR,RR1,RR2
	REAL(8),DEVICE :: DELT,CSIN,SSIN,M,GYHS
	COMPLEX*16,DEVICE :: IOMGA,A1,B1,KF,K1F,N1
	COMPLEX*16,DEVICE :: CP,C0,C1,C2,C3,C4,C5
	COMPLEX*16,DEVICE :: MCSXS(1:4,0:200),RRH(0:200),RRV(0:200)
	COMPLEX*16,DEVICE :: FEEX(NFFE),FEEY(NFFE),FEEZ(NFFE)
	COMPLEX*16,DEVICE :: FHHX(NFFE),FHHY(NFFE),FHHZ(NFFE)
!=====================================================================================
 	XCH=threadidx%x    !频率个数
!=====================================================================================
	FEEX(XCH)=DCMPLX(0.D0,0.D0)
	FEEY(XCH)=DCMPLX(0.D0,0.D0)
	FEEZ(XCH)=DCMPLX(0.D0,0.D0)
	FHHX(XCH)=DCMPLX(0.D0,0.D0)
	FHHY(XCH)=DCMPLX(0.D0,0.D0)
	FHHZ(XCH)=DCMPLX(0.D0,0.D0)
!=====================================================================================
    IOMGA=DCMPLX(0.D0,1.D0)*2.0D0*GPI*GF(XCH)
	KF=IOMGA*GMIU0
!--------------------------------------------------
    IF (JSCF==0) THEN
	A1=GYI0/2.0D0/GPI/DCMPLX(GAIR_S0,IOMGA*GEPSL0)  !空气层电场前的系数（化简后的结果）
	B1=GYI0/2.0D0/GPI                               !空气层磁场前的系数
    ELSEIF (JSCF==GNLP) THEN
	A1=GYI0/2.0D0/GPI/DCMPLX(1.0D0/GRTH(GNLP),IOMGA*GEPSL0) !底层电场前的系数（化简后的结果）
	B1=GYI0/2.0D0/GPI                                       !底层磁场前的系数
	ELSE
	A1=GYI0/2.0D0/GPI/DCMPLX(1.0D0/GRTH(JSCF),IOMGA*GEPSL0) !中间层电场前的系数（化简后的结果）
	B1=GYI0/2.0D0/GPI                                       !中间层磁场前的系数
	END IF
!---------------------------------------------------------
	LS=GLENAB/2.0D0
	IF (GX1== LS) GX1=GX1+1.0E-5
	IF (GX1==-LS) GX1=GX1-1.0E-5
	RR1=DSQRT( (GX1-LS)**2 + GY1**2 )     !两端点半径
	RR2=DSQRT( (GX1+LS)**2 + GY1**2 )
	IF (RR1<1.0E-1) RR1=1.0E-1
	IF (RR2<1.0E-1) RR2=1.0E-1
!---------------------------------------------------------
!  计算Ex、Hy、Hz频率域 -- 源积分项
!---------------------------------------------------------
	DO I=1,SNG
	IF (GX1==GXGS(I)) GX1=GX1+1.0E-5
	RR=DSQRT( (GX1-GXGS(I))**2 + GY1**2 )
	IF (RR<1.0E-1) RR=1.0E-1
	CSIN=GY1/RR
	DO J=1,GNH0
!==================================================
    DELT=GJA1 + (J-1)*GJS1
	M=DEXP(DELT)/RR
	GYHS=GYZS
	CALL MCS_RR( XCH,M,GYHS,RRH,RRV,MCSXS )
!------------------------------------------------------
    IF (JSCF==0) THEN
	K1F=KF*DCMPLX(GAIR_S0,IOMGA*GEPSL0)
    N1=CDSQRT(M*M - K1F)
    C0=MCSXS(1,0)*CDEXP( N1*(GZ1-GHDSZ(1)) )
	C1=DCMPLX(0.D0,0.D0)
	CP=0.5D0*CDEXP(-N1*DABS( GZ1 - GYHS ))/N1
    ELSEIF (JSCF==GNLP) THEN
	K1F=KF*DCMPLX(1.0/GRTH(GNLP),IOMGA*GEPSL0)
    N1=CDSQRT(M*M - K1F)
    C0=DCMPLX(0.D0,0.D0)
	C1=MCSXS(2,GNLP)*CDEXP(-N1*(GZ1-GHDSZ(GNLP)) )
	CP=DCMPLX(0.D0,0.D0)
	ELSE
	K1F=KF*DCMPLX(1.0/GRTH(JSCF),IOMGA*GEPSL0)
    N1=CDSQRT(M*M - K1F)
    C0=MCSXS(1,JSCF)*CDEXP( N1*(GZ1-GHDSZ(JSCF+1)) )
	C1=MCSXS(2,JSCF)*CDEXP(-N1*(GZ1-GHDSZ(JSCF  )) )
	CP=DCMPLX(0.D0,0.D0)
	END IF
!===========================================================================================================
	FEEX(XCH)=FEEX(XCH) + GWGS(I)*KF*B1/RR * (C0 + C1 + CP)*M*GJH0(J)      !高斯积分
	FHHY(XCH)=FHHY(XCH) + GWGS(I)*B1/RR    * (C0 - C1 - CP)*M*N1*GJH0(J)   !高斯积分
	FHHZ(XCH)=FHHZ(XCH) + GWGS(I)*B1*CSIN/RR * (C0 + C1 + CP)*M*M*GJH1(J)  !高斯积分
!===========================================================================================================
	END DO
	END DO
!---------------------------------------------------------
!  计算Ex、Ey、Ez | Hx、Hy频率域 -- RR1分项
!---------------------------------------------------------
!=========================================================
	CSIN=(GX1-LS)/RR1
	SSIN=GY1/RR1
!=========================================================
	DO J=1,GNH0
    DELT=JA1 + (J-1)*JS1
	M=DEXP(DELT)/RR1
	GYHS=GYZS
	CALL MCS_RR( XCH,M,GYHS,RRH,RRV,MCSXS )
    IF (JSCF==0) THEN
	K1F=KF*DCMPLX(GAIR_S0,IOMGA*GEPSL0)
	N1=CDSQRT(M*M - K1F)
	C0=MCSXS(1,0)*CDEXP( N1*(GZ1-GHDSZ(1)) )
	C1=DCMPLX(0.D0,0.D0)
	C2=MCSXS(3,0)*CDEXP( N1*(GZ1-GHDSZ(1)) )
	C3=DCMPLX(0.D0,0.D0)
	CP=0.5D0*CDEXP(-N1*DABS( GZ1 - GYHS ))/N1
    ELSEIF (JSCF==GNLP) THEN
    K1F=KF*DCMPLX(1.0/GRTH(GNLP),IOMGA*GEPSL0)
	N1=CDSQRT(M*M - K1F)
	C0=DCMPLX(0.D0,0.D0)
	C1=MCSXS(2,GNLP)*CDEXP(-N1*(GZ1-GHDSZ(GNLP)) )
	C2=DCMPLX(0.D0,0.D0)
	C3=MCSXS(4,GNLP)*CDEXP(-N1*(GZ1-GHDSZ(GNLP)) )
	CP=DCMPLX(0.D0,0.D0)
	ELSE
    K1F=KF*DCMPLX(1.0/GRTH(JSCF),IOMGA*GEPSL0)
	N1=CDSQRT(M*M - K1F)
	C0=MCSXS(1,JSCF)*CDEXP( N1*(GZ1-GHDSZ(JSCF+1)) )
	C1=MCSXS(2,JSCF)*CDEXP(-N1*(GZ1-GHDSZ(JSCF  )) )
	C2=MCSXS(3,JSCF)*CDEXP( N1*(GZ1-GHDSZ(JSCF+1)) )
	C3=MCSXS(4,JSCF)*CDEXP(-N1*(GZ1-GHDSZ(JSCF  )) )
	CP=DCMPLX(0.D0,0.D0)
	END IF
	C4=( C2 - C3 ) - ( C0 + C1 )*N1/M/M
	C5=( C2 + C3 ) - ( C0 - C1 )*N1/M/M
!===================================================================================================================
	FEEX(XCH)=FEEX(XCH) + A1*CSIN/RR1 * (C0 + C1 + CP + N1*C4 )*M*M*GJH1(J)
	FEEY(XCH)=FEEY(XCH) + A1*SSIN/RR1 * (C0 + C1 + CP + N1*C4 )*M*M*GJH1(J)
	FEEZ(XCH)=FEEZ(XCH) - A1/RR1 * (C0 - C1 - CP + N1*C5)*M*N1*GJH0(J)
	FEEZ(XCH)=FEEZ(XCH) - KF*B1/RR1 *C5*M*GJH0(J)
	FHHX(XCH)=FHHX(XCH) + B1*SSIN/RR1 * C5*M*M*GJH1(J)
	FHHY(XCH)=FHHY(XCH) - B1*CSIN/RR1 * C5*M*M*GJH1(J)
!===================================================================================================================
    END DO
!---------------------------------------------------------
!  计算Ex、Ey、Ez | Hx、Hy频率域 -- RR2分项
!---------------------------------------------------------
!=========================================================
	CSIN=(GX1+LS)/RR2
	SSIN=GY1/RR2
!=========================================================
	DO J=1,GNH0
    DELT=GJA1 + (J-1)*GJS1
	M=DEXP(DELT)/RR2
	GYHS=GYZS
	CALL MCS_RR( XCH,M,GYHS,RRH,RRV,MCSXS )
    IF (JSCF==0) THEN
	K1F=KF*DCMPLX(GAIR_S0,IOMGA*GEPSL0)
	N1=CDSQRT(M*M - K1F)
	C0=MCSXS(1,0)*CDEXP( N1*(GZ1-GHDSZ(1)) )
	C1=DCMPLX(0.D0,0.D0)
	C2=MCSXS(3,0)*CDEXP( N1*(GZ1-GHDSZ(1)) )
	C3=DCMPLX(0.D0,0.D0)
	CP=0.5D0*CDEXP(-N1*DABS( GZ1 - GYHS ))/N1
    ELSEIF (JSCF==GNLP) THEN
	K1F=KF*DCMPLX(1.0/GRTH(GNLP),IOMGA*GEPSL0)
	N1=CDSQRT(M*M - K1F)
	C0=DCMPLX(0.D0,0.D0)
	C1=MCSXS(2,GNLP)*CDEXP(-N1*(GZ1-GHDSZ(GNLP)) )
	C2=DCMPLX(0.D0,0.D0)
	C3=MCSXS(4,GNLP)*CDEXP(-N1*(GZ1-GHDSZ(GNLP)) )
	CP=DCMPLX(0.D0,0.D0)
	ELSE
	K1F=KF*DCMPLX(1.0/GRTH(JSCF),IOMGA*GEPSL0)
	N1=CDSQRT(M*M - K1F)
	C0=MCSXS(1,JSCF)*CDEXP( N1*(GZ1-GHDSZ(JSCF+1)) )
	C1=MCSXS(2,JSCF)*CDEXP(-N1*(GZ1-GHDSZ(JSCF  )) )
	C2=MCSXS(3,JSCF)*CDEXP( N1*(GZ1-GHDSZ(JSCF+1)) )
	C3=MCSXS(4,JSCF)*CDEXP(-N1*(GZ1-GHDSZ(JSCF  )) )
	CP=DCMPLX(0.D0,0.D0)
	END IF
	C4=( C2 - C3 ) - ( C0 + C1 )*N1/M/M
	C5=( C2 + C3 ) - ( C0 - C1 )*N1/M/M
!===================================================================================================================
	FEEX(XCH)=FEEX(XCH) - A1*CSIN/RR2 * (C0 + C1 + CP + N1*C4 )*M*M*GJH1(J)
	FEEY(XCH)=FEEY(XCH) - A1*SSIN/RR2 * (C0 + C1 + CP + N1*C4 )*M*M*GJH1(J)
	FEEZ(XCH)=FEEZ(XCH) + A1/RR2 * (C0 - C1 - CP + N1*C5)*M*N1*GJH0(J)
	FEEZ(XCH)=FEEZ(XCH) + KF*B1/RR2 *C5*M*GJH0(J)
	FHHX(XCH)=FHHX(XCH) - B1*SSIN/RR2 * C5*M*M*GJH1(J)
	FHHY(XCH)=FHHY(XCH) + B1*CSIN/RR2 * C5*M*M*GJH1(J)
!===================================================================================================================
    END DO
!   CALL syncthreads()   !等待所有的线程运行结束
!===================================================================================================================
	RETURN
	END SUBROUTINE


!**********************************************************************************
!----------------------------------------------------------------------------------
    SUBROUTINE D1_SOTEMZ(TEDM,CDBLF,LSI,POTNS,NF,NLP,FQT,MODS,EH_F)
	IMPLICIT NONE
    INTEGER:: I,J,K,TEDM,NLP,NF,POTNS
    INTEGER:: JSCV,NFRE
    REAL(8) :: X1,Y1,Z1,X1_C,Y1_C,Z1_C
    REAL(8) :: XP,YP,ABLX,ABLY,LENAB,COSF,SINF,YL,YI0
    REAL(8) :: MIN_TS,MAX_TS,YZS
!=====================================================================================
    REAL(8) :: HDSZ(NLP),FQT(NF)
	TYPE(TYPE_EHINF) :: EH_F(NF)
	TYPE(TYPE_ISINF) :: LSI(POTNS)
	TYPE(TYPE_CDINF) :: CDBLF
	TYPE(TYPE_MODINF) :: MODS(NLP)
!=====================================================================================
    REAL(8),Allocatable :: FQ(:),RTH(:),HDS(:)
	COMPLEX*16,Allocatable :: FEX(:),FEY(:),FEZ(:),FHX(:),FHY(:),FHZ(:)
	COMPLEX*16,Allocatable :: SEX(:),SEY(:),SEZ(:),SHX(:),SHY(:),SHZ(:)
!================================================================================================
    INTEGER,DEVICE :: NTRE,JSCF
    REAL(8),Allocatable,DEVICE :: TQS(:)
	REAL(8),Allocatable,DEVICE :: QEX(:),QEY(:),QEZ(:),QHX(:),QHY(:),QHZ(:)
	REAL(8),Allocatable,DEVICE :: RFEX(:),RFEY(:),RFEZ(:)
	REAL(8),Allocatable,DEVICE :: IFHX(:),IFHY(:),IFHZ(:)
	COMPLEX*16,Allocatable,DEVICE :: FEEX(:),FEEY(:),FEEZ(:)
	COMPLEX*16,Allocatable,DEVICE :: FHHX(:),FHHY(:),FHHZ(:)
!================================================================================================
    TYPE(dim3) :: BIMThreads,BIMBlocks
!=====================================================================================
!=====================================================================================
	IF (TEDM==2)  THEN              !瞬变电磁时需要计算的频率
	   MAX_TS=DLOG10( 1.0D0/MINVAL(FQT) )+2.0D0
	   MIN_TS=DLOG10( 1.0D0/MAXVAL(FQT) )-3.0D0
	   NFRE=INT(10.0D0*(MAX_TS-MIN_TS)) + 1
	   ALLOCATE( FQ(NFRE) )
	   DO I=1,NFRE
	     MAX_TS=MIN_TS + (I-1)*0.1D0
         FQ(I)=10.0D0**MAX_TS
	   END DO
	ELSE                            !CSEM时需要计算的频率
	   NFRE=NF
	   ALLOCATE( FQ(NFRE) )
       FQ(1:NFRE)=FQT(1:NF)
	END IF
!*************************************************************************************
	X1_C=CDBLF%X
	Y1_C=CDBLF%Y
	Z1_C=CDBLF%Z
!=====================================================================================
	ALLOCATE( FEX(NFRE),FEY(NFRE),FEZ(NFRE) )
	ALLOCATE( FHX(NFRE),FHY(NFRE),FHZ(NFRE) )
	FEX(1:NFRE)=DCMPLX(0.0D0,0.0D0)
	FEY(1:NFRE)=DCMPLX(0.0D0,0.0D0)
	FEZ(1:NFRE)=DCMPLX(0.0D0,0.0D0)
	FHX(1:NFRE)=DCMPLX(0.0D0,0.0D0)
	FHY(1:NFRE)=DCMPLX(0.0D0,0.0D0)
	FHZ(1:NFRE)=DCMPLX(0.0D0,0.0D0)
	ALLOCATE( RTH(NLP),HDS(NLP) )
    DO I=1,NLP
     RTH(I)=MODS(I)%R   !层电阻率
	 HDS(I)=MODS(I)%H   !层厚度
	END DO
!*************************************************************************************
    DO 100 K=1,POTNS
!*************************************************************************************
!=====================================================================================
    XP=X1_C-0.5D0*(LSI(K)%AX + LSI(K)%BX)       !将源中点位置设计为原点
	YP=Y1_C-0.5D0*(LSI(K)%AY + LSI(K)%BY)   !将源中点位置设计为原点
	YZS=0.5D0*(LSI(K)%AZ + LSI(K)%BZ)
	ABLX=LSI(K)%BX - LSI(K)%AX
	ABLY=LSI(K)%BY - LSI(K)%AY
	LENAB=DSQRT( ABLX*ABLX + ABLY*ABLY )
	COSF= ABLX/LENAB
	SINF=-ABLY/LENAB  !反方向旋转，将电偶极子变为X轴方向重合
    YL=0.5D0*LENAB
	YI0=LSI(K)%IS
!====================================================================
	X1=XP*COSF - YP*SINF   !按源中点将源的方向设计(旋转)为X轴
	Y1=XP*SINF + YP*COSF   !按源中点将源的方向设计(旋转)为X轴
	Z1=Z1_C
!====================================================================
    IF (X1==0.0D0 .AND. Y1==0.0D0) X1=1.0E-5
!=====================================================================================
    NG=INT( LENAB/5.0 )
	IF ( NG>10 ) NG=10
	IF ( NG<3  ) NG=3
!=====================================================================================
	ALLOCATE( XGS(NG),WGS(NG) )
    CALL GAULEG(-YL,YL,XGS,WGS,NG)
!********************************************************************
    HDSZ(1)=0.0D0   !判断计算点所在的层位置
    DO I=2,NLP,1
    HDSZ(I)=HDSZ(I-1) + HDS(I-1)
	END DO
	IF ( Z1<=HDSZ(1  ) ) JSCV=0
	IF ( Z1> HDSZ(NLP) ) JSCV=NLP
	DO I=1,NLP-1
	 IF ( Z1<=HDSZ(I+1) .AND. Z1>HDSZ(I) ) JSCV=I
	END DO
!********************************************************************
!   数据传给设备(GPU)
!********************************************************************
      GYXS=0.0D0
	  GYYS=0.0D0
	  GYZS=YZS    !确定计算系统中源的坐标位置
	GLENAB=LENAB  !计算源的长度
	  GYI0=YI0    !源电流
	    GX1=X1    !测点坐标
	    GY1=Y1    !测点坐标
	    GZ1=Z1    !测点坐标
	   NFFE=NFRE
	   GNLP=NLP
	    SNG=NG
        GPI=PI
       JSCF=JSCV
	ALLOCATE( GRTH(NLP),GHDS(NLP),GHDSZ(NLP) )
    GRTH(1:NLP)=RTH(1:NLP)    !层电阻率
	GHDS(1:NLP)=HDS(1:NLP)    !层厚度
	GHDSZ(1:NLP)=HDSZ(1:NLP)    !层界线深度
	ALLOCATE( GJH0(NH0),GJH1(NH1),GF(NFRE),GXGS(NG),GWGS(NG) )
	GF(1:NFRE)=FQ(1:NFRE)
    GJH0(1:NH0)=JH0(1:NH0)
	GJH1(1:NH1)=JH1(1:NH1)
	GXGS(1:NG)=XGS(1:NG)
	GWGS(1:NG)=WGS(1:NG)
!*************************************************************************************
!   '----------------开始计算频率域电磁响应-----------------------------'
!*************************************************************************************
!   计算系统以观测点及观测方向确定X,Y,Z方向
!   如果源和坐标系统的X方向不一致，这时需要将偶极子分解
!====================================================================
    BIMThreads=DIM3(NFRE,1,1)   !分配 NFRE 个线程
!*************************************************************************************
	ALLOCATE( FEEX(NFRE),FEEY(NFRE),FEEZ(NFRE) )
	ALLOCATE( FHHX(NFRE),FHHY(NFRE),FHHZ(NFRE) )
	ALLOCATE( SEX(NFRE),SEY(NFRE),SEZ(NFRE) )
	ALLOCATE( SHX(NFRE),SHY(NFRE),SHZ(NFRE) )
    CALL EAIR_HEDX<<<1,BIMThreads>>>( JSCF,FEEX,FEEY,FEEZ,FHHX,FHHY,FHHZ )
	SEX(1:NFRE)=FEEX(1:NFRE)
	SEY(1:NFRE)=FEEY(1:NFRE)
	SEZ(1:NFRE)=FEEZ(1:NFRE)
	SHX(1:NFRE)=FHHX(1:NFRE)
	SHY(1:NFRE)=FHHY(1:NFRE)
	SHZ(1:NFRE)=FHHZ(1:NFRE)
	DO I=1,NFRE
	FEX(I)=FEX(I) + SEX(I)*COSF + SEY(I)*SINF
	FEY(I)=FEY(I) - SEX(I)*SINF + SEY(I)*COSF
	FEZ(I)=FEZ(I) + SEZ(I)
	FHX(I)=FHX(I) + SHX(I)*COSF + SHY(I)*SINF
	FHY(I)=FHY(I) - SHX(I)*SINF + SHY(I)*COSF
	FHZ(I)=FHZ(I) + SHZ(I)
	END DO
	DEALLOCATE( GRTH,GHDS,GHDSZ )
	DEALLOCATE( GJH0,GJH1,GXGS,GWGS )
	DEALLOCATE( GF,XGS,WGS )
    DEALLOCATE( FEEX,FEEY,FEEZ,FHHX,FHHY,FHHZ )
	DEALLOCATE( SEX,SEY,SEZ,SHX,SHY,SHZ )
!*************************************************************************************
100 CONTINUE
	DEALLOCATE( RTH,HDS )
!*************************************************************************************
	IF (TEDM==1) THEN
	DO I=1,NFRE
	 EH_F(I)%Ex=CDABS( FEX(I) )
	 EH_F(I)%Ey=CDABS( FEY(I) )
	 EH_F(I)%Ez=CDABS( FEZ(I) )
	 EH_F(I)%Hx=CDABS( FHX(I) )
	 EH_F(I)%Hy=CDABS( FHY(I) )
	 EH_F(I)%Hz=CDABS( FHZ(I) )
	 EH_F(I)%CEx=FEX(I)
	 EH_F(I)%CEy=FEY(I)
	 EH_F(I)%CEz=FEZ(I)
	 EH_F(I)%CHx=FHX(I)
	 EH_F(I)%CHy=FHY(I)
	 EH_F(I)%CHz=FHZ(I)
	END DO
	END IF
!*************************************************************************************
	IF (TEDM/=2) GOTO 140   !如果是频率域则提前退出
!*************************************************************************************
    GNH05=NH05
	NTRE=NF
	NFFE=NFRE
    ALLOCATE( GF(NFRE),TQS(NF),GJH05(NH05) )
	ALLOCATE( QEX(NF),QEY(NF),QEZ(NF) )
	ALLOCATE( QHX(NF),QHY(NF),QHZ(NF) )
    GJH05(1:NH05)=JH05(1:NH05)
	TQS(1:NF)=FQT(1:NF)
    GF(1:NFRE)=FQ(1:NFRE)
	ALLOCATE( RFEX(NFRE),RFEY(NFRE),RFEZ(NFRE) )
	ALLOCATE( IFHX(NFRE),IFHY(NFRE),IFHZ(NFRE) )
    RFEX(1:NFRE)=DBLE(FEX(1:NFRE))
    RFEY(1:NFRE)=DBLE(FEY(1:NFRE))
    RFEZ(1:NFRE)=DBLE(FEZ(1:NFRE))
    IFHX(1:NFRE)=DIMAG(FHX(1:NFRE))
    IFHY(1:NFRE)=DIMAG(FHY(1:NFRE))
    IFHZ(1:NFRE)=DIMAG(FHZ(1:NFRE))
!****************************************************************************************************************************************
    BIMThreads=DIM3(NF,1,1)   !一个线程块 分配 NF 个线程 *1.0E+9/ABI(I)
!****************************************************************************************************************************************
    CALL STEP_RESPONGSE<<<1,BIMThreads>>>(TQS,NTRE,RFEX,RFEY,RFEZ,IFHX,IFHY,IFHZ,QEX,QEY,QEZ,QHX,QHY,QHZ)
	EH_F(1:NF)%Ex=DABS(QEX(1:NF))
	EH_F(1:NF)%Ey=DABS(QEY(1:NF))
	EH_F(1:NF)%Ez=DABS(QEZ(1:NF))
	EH_F(1:NF)%Hx=DABS(QHX(1:NF))
	EH_F(1:NF)%Hy=DABS(QHY(1:NF))
	EH_F(1:NF)%Hz=DABS(QHZ(1:NF))
	DEALLOCATE(GF,TQS,GJH05,QEX,QEY,QEZ,QHX,QHY,QHZ)
!*************************************************************************************
!   阶跃响应计算完毕
!*************************************************************************************
140 CONTINUE
	DEALLOCATE( FQ,FEX,FEY,FEZ,FHX,FHY,FHZ )
!*************************************************************************************
    RETURN
    END SUBROUTINE

!=====================================================================================
!    功能说明:
!=====================================================================================
!	下面的函数是为了计算高斯点和权系数
!=====================================================================================
	SUBROUTINE GAULEG(LX1,LX2,GSWX,GSWQ,GSN)
!	GSN是整型变量，输入参数，节点数
!	LX1是实行变量，输入参数，积分下限
!	LX2是实行变量，输入参数，积分上限
!	GSWX是N个变元的一维实型数组，输出参数，存放高斯点
!	GSWQ是N个变元的一维实型数组，输出参数，存放高斯求积公式的权系数
!=====================================================================================
    IMPLICIT NONE
    INTEGER :: I,J,K,KM,GSN
	REAL(8) :: P1,P2,P3,PP,ZP,XM,XL,LZ1
	REAL(8) :: LX1,LX2,GSWX(GSN),GSWQ(GSN)
	REAL(8),PARAMETER :: EPS=3.0D-14
	KM=(GSN+1)/2
	XM=0.5D0*(LX2+LX1)
	XL=0.5D0*(LX2-LX1)
	DO 12 I=1,KM
	   ZP=DCOS(3.141592654D0*(I-0.25D0)/DBLE(GSN+0.5D0))
1	   CONTINUE
	   P1=1.D0
	   P2=0.D0
	   DO 11 J=1,GSN
	      P3=P2
	      P2=P1
	      P1=((2.D0*J-1.D0)*ZP*P2-(J-1.D0)*P3)/DBLE(J)
11	   CONTINUE
	   PP=GSN*(ZP*P1-P2)/(ZP*ZP-1.D0) 
	   LZ1=ZP
	   ZP=LZ1-P1/PP
	   IF (DABS(ZP-LZ1).GT.EPS) GOTO 1
	   GSWX(I)=XM-XL*ZP
	   GSWX(GSN+1-I)=XM+XL*ZP
	   GSWQ(I)=2.D0*XL/((1.D0-ZP*ZP)*PP*PP)
	   GSWQ(GSN+1-I)=GSWQ(I)
12	CONTINUE
	RETURN
	END

!=====================================================================================
!    功能说明:
!=====================================================================================
!   GPU并行计算时间域阶跃响应
!=====================================================================================
	ATTRIBUTES(GLOBAL) SUBROUTINE STEP_RESPONGSE(TQS,NTRE,RFEX,RFEY,RFEZ,IFHX,IFHY,IFHZ,QEX,QEY,QEZ,QHX,QHY,QHZ)
    IMPLICIT NONE   
!************************************************************************************
!	F为输入参数，给出所要计算的频率数组                                             *
!	NFRE为输入参数，是F数组的元素个数                                               *
!	IT为输入参数，为采样时间                                                        *
!	JH05为输入参数，是0.5阶汉克尔变换的系数                                         *
!	FEEX,FHHY,FHHZ为输入参数，是频率域响应的实部，每个数组有NFRE个元素              *
!	QEX,QHY,QHZ为输出参数，是长导线瞬变电磁法的时间域响应                           *
!	DELT是采样间隔，ln(10)/10                                                       *
!	F1(NH05)是插值点的频率                                                          *
!	NH05是0.5阶汉克尔变换系数的个数，也就是所要插值点的个数                         *
!	NC2是为了方便表示数组而引入的参数                                               *
!	C是时间域阶跃响应前面的系数                                                     *
!	S1,S4,S5是中间变量                                                              *
!************************************************************************************
    INTEGER,VALUE :: XCH,XCL			
    INTEGER,DEVICE :: NTRE,II,J,K
	INTEGER,DEVICE :: NC2=80
	REAL(8),DEVICE :: TQS(NTRE),F1,OMIGA
    REAL(8),DEVICE :: RFEX(NFFE),RFEY(NFFE),RFEZ(NFFE)
	REAL(8),DEVICE :: IFHX(NFFE),IFHY(NFFE),IFHZ(NFFE)
    REAL(8),DEVICE :: RFEX1,RFEY1,RFEZ1,IFHX1,IFHY1,IFHZ1
    REAL(8),DEVICE :: C,DELT,S1,S2,S3,S10,S11,S12,Y1(1000)
    REAL(8),DEVICE :: QEX(NTRE),QEY(NTRE),QEZ(NTRE)
    REAL(8),DEVICE :: QHX(NTRE),QHY(NTRE),QHZ(NTRE)
!=====================================================================================
 	XCH=threadidx%x    !时间个数
	QEX(XCH)=0.0D0
	QEY(XCH)=0.0D0
	QEZ(XCH)=0.0D0
	QHX(XCH)=0.0D0
	QHY(XCH)=0.0D0
	QHZ(XCH)=0.0D0
!=====================================================================================
	S1=0.D0
	S2=0.D0
	S3=0.D0
	S10=0.D0
	S11=0.D0
	S12=0.D0
!--------------------------------------------------------------------------------------
!	计算时间域阶跃响应
!	F1是计算汉克尔变换不同的n所对应的频率，并进行插值，最后得到时间域介于响应
!   这三次样条插值的方法   计算F（n*delt)*H0.5(n)的累加和
!-----------------------------------------------------------------------------------------------------------
	DO 410 II=1,NH05
!------------------------------------------------
      DELT=GJA5 + DBLE(II)*GJS5
      OMIGA=DEXP(DELT)/TQS(XCH)
	  F1=OMIGA/2.0D0/GPI
!------------------------------------------------
	 CALL SPLINE(GF,RFEX,NFFE,0.D0,0.D0,Y1)
	 CALL SPLINT(GF,RFEX,Y1,NFFE,F1,RFEX1)
	 CALL SPLINE(GF,RFEY,NFFE,0.D0,0.D0,Y1)
	 CALL SPLINT(GF,RFEY,Y1,NFFE,F1,RFEY1)
	 CALL SPLINE(GF,RFEZ,NFFE,0.D0,0.D0,Y1)
	 CALL SPLINT(GF,RFEZ,Y1,NFFE,F1,RFEZ1)
!------------------------------------------------
	 CALL SPLINE(GF,IFHX,NFFE,0.D0,0.D0,Y1)
	 CALL SPLINT(GF,IFHX,Y1,NFFE,F1,IFHX1)
	 CALL SPLINE(GF,IFHY,NFFE,0.D0,0.D0,Y1)
	 CALL SPLINT(GF,IFHY,Y1,NFFE,F1,IFHY1)	         
	 CALL SPLINE(GF,IFHZ,NFFE,0.D0,0.D0,Y1)
	 CALL SPLINT(GF,IFHZ,Y1,NFFE,F1,IFHZ1)
!------------------------------------------------
	 S1=S1   + RFEX1/DSQRT(OMIGA)*GJH05(II)
	 S2=S2   + RFEY1/DSQRT(OMIGA)*GJH05(II)
	 S3=S3   + RFEZ1/DSQRT(OMIGA)*GJH05(II)
     S10=S10 + IFHX1*DSQRT(OMIGA)*GJH05(II)
     S11=S11 + IFHY1*DSQRT(OMIGA)*GJH05(II)
     S12=S12 + IFHZ1*DSQRT(OMIGA)*GJH05(II)
410	CONTINUE
!========================================================
	 C=-DSQRT(2.0D0/GPI/TQS(XCH))
	 QEX(XCH)=C*S1 + RFEX(1) !Ex_t
	 QEY(XCH)=C*S2 + RFEY(1) !Ey_t
	 QEZ(XCH)=C*S3 + RFEZ(1) !Ez_t
	 QHX(XCH)=-C*S10*GMIU0   !dBx/dt
	 QHY(XCH)=-C*S11*GMIU0   !dBx/dt
	 QHZ(XCH)=-C*S12*GMIU0   !dBx/dt
!========================================================
    RETURN
!========================================================
END SUBROUTINE



!=====================================================================================
!    功能说明:
!=====================================================================================
!######################################################################################################
!************************************************************************************
!	计算插值函数在节点x1<x2<・・・<xn处的二阶导数值―――――Fortran77手册上的      *
!************************************************************************************
	ATTRIBUTES(DEVICE) SUBROUTINE SPLINE(XGQ,YGQ,NSF,QYP1,QYPN,QY2)
!*******************************************************************************
!	X是N个元素的一维实型数组，输入参数，存放样条节点：x1<x2<・・・<xn          *
!	Y是N个元素的一维实型数组，输入参数，存放节点的函数值                       *
!	N整型变量输入参数，节点个数                                                *
!	YP1，YPNa是实行变量，输入参数，分别存放插值函数在x1和xn点的一阶倒数        *
!			 当这两个量或其中之一大于等于10**30时，子程序自动调用自然样条条件  *
!	Y2是N个元素的一维实型数组，输出参数，输出差值函数在插值接节点的二阶导数值  *
!*******************************************************************************
	INTEGER,DEVICE :: NMAX=1000
	INTEGER,DEVICE :: NSF,I,K
	REAL(8),DEVICE :: P,SIG,QN,UN,QYP1,QYPN
	REAL(8),DEVICE :: XGQ(NSF),YGQ(NSF),QY2(1000),QU(1000)

	IF(QYP1 .GT. 0.99E30)THEN
	   QY2(1)=0.0D0
	   QU(1)=0.0D0
	ELSE
	   QY2(1)=-0.50D0
	   QU(1)=(3.0D0/(XGQ(2)-XGQ(1)))*((YGQ(2)-YGQ(1))/(XGQ(2)-XGQ(1))-QYP1)     	 
	END IF
	DO 11 I=2,NSF-1
	   SIG=(XGQ(I)-XGQ(I-1))/(XGQ(I+1)-XGQ(I-1))
	   P=SIG*QY2(I-1)+2.0D0
	   QY2(I)=(SIG-1.0D0)/P
	   QU(I)=(6.0D0*((YGQ(I+1)-YGQ(I))/(XGQ(I+1)-XGQ(I))-(YGQ(I)-   &
           YGQ(I-1))/(XGQ(I)-XGQ(I-1)))/(XGQ(I+1)-XGQ(I-1))-SIG* &
           QU(I-1))/P
11	CONTINUE
	IF(QYPN .GT. 0.99E30)THEN
	   QN=0.0D0
	   UN=0.0D0
	ELSE
	   QN=0.5D0
	   UN=(3.0D0/(XGQ(NSF)-XGQ(NSF-1)))*(QYPN-(YGQ(NSF)-YGQ(NSF-1))/ (XGQ(NSF)-XGQ(NSF-1)))        
	END IF
	QY2(NSF)=(UN-QN*QU(NSF-1))/(QN*QY2(NSF-1)+1.0D0)
	DO 12 K=NSF-1,1,-1
	   QY2(K)=QY2(K)*QY2(K+1)+QU(K)
12	CONTINUE
	RETURN
	END
	
	
!****************************************************************************
	ATTRIBUTES(DEVICE) SUBROUTINE SPLINT(QXA,QYA,QY2A,NSF,QX,QY)
!****************************************************************************
!	N是整型变量输入参数，节点个数                                           *
!	QXA是N个元素的一维实型数组，输入参数，存放样条节点：x1<x2<・・・<xn     *
!	QYA是N个元素的一维实型数组，输入参数，存放节点的函数值                  *
!	QYA2是N个元素的一维实型数组，输入参数，存放由子程序SPLIN输出的二阶导数值*
!	QX实型变量，输入参数，插值点                                            *
!	QY实行变量，输出参数，插值结果                                          *
!****************************************************************************
	INTEGER,DEVICE :: NSF,K,KLO,KHI
	REAL(8),DEVICE :: QX,QY,H,A,B
	REAL(8),DEVICE :: QXA(NSF),QYA(NSF),QY2A(1000)
!****************************************************************************
	KLO=1
	KHI=NSF
!============================================================================================
    IF (QX.LT.QXA(1)) THEN                            !当所要插值的点在已知节点范围之外就利用边
       QY=(QYA(1)+QYA(2)+QYA(3)+QYA(4)+QYA(5))/5.D0   !界处五点的值求平均来代替所要插的节点出的值
    ELSE IF(QX.GT.QXA(NSF))THEN
       QY=(QYA(NSF)+QYA(NSF-1)+QYA(NSF-2)+QYA(NSF-3)+QYA(NSF-4))/5.D0
	ELSE 
1	IF((KHI-KLO).GT.1)THEN
	   K=(KHI+KLO)/2
	   IF(QXA(K).GT.QX)THEN
	      KHI=K
	   ELSE
	      KLO=K
	   END IF
	   GOTO 1
	END IF
	H=QXA(KHI)-QXA(KLO)
!	IF ( H.EQ.0 ) PAUSE'BED XA INPUT'
	A=(QXA(KHI)-QX)/H
	B=(QX-QXA(KLO))/H
	QY=A*QYA(KLO)+B*QYA(KHI)+((A**3-A)*QY2A(KLO)  &
          +(B**3-B)*QY2A(KHI))*(H*2)/6.0D0
	END IF
	RETURN
	END
!*********************************************************************************
    END MODULE
!*********************************************************************************